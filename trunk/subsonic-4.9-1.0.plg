<?xml version='1.0' standalone='yes'?>
<PLUGIN>

<!--
2013-04-21	4.9-1.0  	- Upgraded to Subsonic 4.9

This Plugin installs and controls subsonic.
All dependencies are installed as needed and everything is controlable from the webgui
-->

<FILE Name="/boot/packages/jre-7u45-i586.txz" Run="upgradepkg --install-new">
<URL>https://unraid-madsonic-plugin.googlecode.com/svn/trunk/jre-7u45-i586.txz</URL>
</FILE>

<FILE Name="/boot/packages/ffmpeg-0.8.12-i686-1sl.txz" Run="upgradepkg --install-new">
<URL>https://unraid-madsonic-plugin.googlecode.com/svn/trunk/ffmpeg-0.8.12-i686-1sl.txz</URL>
</FILE>

<FILE Name="/boot/packages/ffmpeg-1sl-pkgs.tgz">
<URL>https://unraid-madsonic-plugin.googlecode.com/svn/trunk/ffmpeg-1sl-pkgs.tgz</URL>
</FILE>

<FILE Name="/boot/config/plugins/subsonic/subsonic.png">
<URL>https://unraid-madsonic-plugin.googlecode.com/svn/trunk/subsonic.png</URL>
</FILE>

<!-- clean up previous install -->
<FILE Name="/tmp/subsonic-cleanup" Run="/bin/bash">
<INLINE>
<![CDATA[
# clean up old subsonic folder
rm -f -R /usr/local/emhttp/plugins/subsonic
rm -f /etc/rc.d/rc.subsonic
rm /tmp/subsonic-cleanup
]]>
</INLINE>
</FILE>

<!-- create configuration file -->
<FILE Name="/boot/config/plugins/subsonic/subsonic.cfg">
<INLINE>
<![CDATA[
# subsonic configuration
SERVICE="disable"
SUBSONIC_HOME="/boot/config/plugins/subsonic"
SUBSONIC_HOST="0.0.0.0"
SUBSONIC_PORT="4040"
SUBSONIC_HTTPS_PORT="0"
SUBSONIC_CONTEXT_PATH="/"
SUBSONIC_MAX_MEMORY="100"
USE_BETA="0"
RUNAS="nobody"
]]>
</INLINE>
</FILE>

<!-- specify that this plugin will display in the network services section -->
<FILE Name="/usr/local/emhttp/plugins/subsonic/subsonic.page">
<INLINE>
<![CDATA[
Menu="NetworkServices"
Icon="subsonic.png"
Version="subsonic-4.9-1.0"
Author="Madevil"
Type="php"
Title="Subsonic"
]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/subsonic/subsonic.png">
<LOCAL>/boot/config/plugins/subsonic/subsonic.png</LOCAL>
</FILE>

<FILE Name="/etc/rc.d/rc.subsonic" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/sh
# Start/stop/install subsonic.

subsonic_start()
{
	# no-op if not enabled
	if [[ $SERVICE != "enable" ]]; then
		return
	fi
	
	# no-op if already running
	if [[ -r /var/run/subsonic/subsonic.pid ]]; then
		echo -n "Subsonic is Already Running!"
		return
	fi
	
	# if directory doesn't exist or Subsonic is not found, install it
	subsonic_install
	
	# add JAVA_HOME
    sed -i -e '8 c\\JAVA_HOME=/usr/lib/java' "$SUBSONIC_HOME"/subsonic.sh

	# update default config with new values
	sed -i -e '/^SUBSONIC_HOME/c\\SUBSONIC_HOME='"$SUBSONIC_HOME" "$SUBSONIC_HOME"/subsonic.sh
	sed -i -e '/^SUBSONIC_HOST/c\\SUBSONIC_HOST='"$SUBSONIC_HOST" "$SUBSONIC_HOME"/subsonic.sh
	sed -i -e '/^SUBSONIC_PORT/c\\SUBSONIC_PORT='"$SUBSONIC_PORT" "$SUBSONIC_HOME"/subsonic.sh
	sed -i -e '/^SUBSONIC_HTTPS_PORT/c\\SUBSONIC_HTTPS_PORT='"$SUBSONIC_HTTPS_PORT" "$SUBSONIC_HOME"/subsonic.sh
	sed -i -e '/^SUBSONIC_CONTEXT_PATH/c\\SUBSONIC_CONTEXT_PATH='"$SUBSONIC_CONTEXT_PATH" "$SUBSONIC_HOME"/subsonic.sh
	sed -i -e '/^SUBSONIC_MAX_MEMORY/c\\SUBSONIC_MAX_MEMORY='"$SUBSONIC_MAX_MEMORY" "$SUBSONIC_HOME"/subsonic.sh
	sed -i -e '/^SUBSONIC_PIDFILE/c\\SUBSONIC_PIDFILE=/var/run/subsonic/subsonic.pid' "$SUBSONIC_HOME"/subsonic.sh
	
	# Use UTF8 to support special characters
	export LANG="en_US.utf8"
	export LANGUAGE="en_US.utf8"
	export LC_CTYPE="en_US.utf8"
	
	cd "$SUBSONIC_HOME"
	echo -n "Starting Subsonic..."
	chmod +x ./subsonic.sh
	chmod +x ./transcode/ffmpeg
	sudo -u "$RUNAS" sh ./subsonic.sh > /dev/null 2>&1
	echo
			
	while [[ ! -e /var/run/subsonic/subsonic.pid  ]]; do
		sleep 1
	done
	echo -n "Started Subsonic!"
}

subsonic_stop()
{
	if [[ -e /var/run/subsonic/subsonic.pid ]]; then
		echo "Stopping Subsonic..."
		SUBSONIC_PID=`cat /var/run/subsonic/subsonic.pid`
		kill -15 "$SUBSONIC_PID"
		rm -f "/var/run/subsonic/subsonic.pid"
	fi
	
	while [[ -e /var/run/subsonic/subsonic.pid ]]; do
		sleep 1
	done
}

subsonic_install()
{
	if [[ ! -e "$SUBSONIC_HOME" ]]; then 
		echo "Create the installtion directory"
		mkdir -p "$SUBSONIC_HOME"
	fi
	
	if [[ "$USE_BETA" == "0" ]]; then
		echo "Installing Subsonic 4.9..."
		wget https://unraid-madsonic-plugin.googlecode.com/svn/trunk/subsonic-4.9-standalone.tar.gz -q -nc -P /boot/packages/
		tar --keep-newer-files -zxf /boot/packages/subsonic-4.9-standalone.tar.gz -C "$SUBSONIC_HOME" >/dev/null 2>&1
	else
		echo "Installing Subsonic 4.9..."
		wget https://unraid-madsonic-plugin.googlecode.com/svn/trunk/subsonic-4.9-standalone.tar.gz -q -nc -P /boot/packages/
		tar --keep-newer-files -zxf /boot/packages/subsonic-4.9-standalone.tar.gz -C "$SUBSONIC_HOME" >/dev/null 2>&1
	fi
	
	# copy ffmpeg to /transcode/
	rm -rf "$SUBSONIC_HOME"/transcode
	mkdir "$SUBSONIC_HOME"/transcode
	cp -rf /usr/bin/ffmpeg "$SUBSONIC_HOME"/transcode/ffmpeg
	
	# change owner of installation directory only if it's not installed in the flash drive.
	if [[ ! "$SUBSONIC_HOME" == /boot/* ]] ; then
		chown -R $RUNAS:users "$SUBSONIC_HOME"
	fi
}

subsonic_disable()
{
	subsonic_stop
	
	SERVICE=disable
	SUBSONIC_HOME="$1"
	SUBSONIC_HOST="$2"
	SUBSONIC_PORT="$3"
	SUBSONIC_HTTPS_PORT="$8"
	SUBSONIC_CONTEXT_PATH="$4"
	SUBSONIC_MAX_MEMORY="$5"
	USE_BETA="$6"
	RUNAS="$7"
		
	write_config
}

subsonic_enable()
{
	# if not already enabled, enable it
	if [ "$SERVICE" != "enable" ]; then
		SERVICE=enable
		SUBSONIC_HOME="$1"
		SUBSONIC_HOST="$2"
		SUBSONIC_PORT="$3"
		SUBSONIC_HTTPS_PORT="$8"
		SUBSONIC_CONTEXT_PATH="$4"
		SUBSONIC_MAX_MEMORY="$5"
		USE_BETA="$6"
		RUNAS="$7"
	
		write_config
	fi
	
	subsonic_start
}

write_config()
{
	# if text boxes are empty, use the default value
	if [[ "$SUBSONIC_HOME" == "" ]]; then
		SUBSONIC_HOME="/boot/config/plugins/subsonic"
	fi
	if [[ "$SUBSONIC_HOST" == "" ]]; then
		SUBSONIC_HOST="0.0.0.0"
	fi
	if [[ "$SUBSONIC_PORT" == "" ]]; then
		SUBSONIC_PORT="4040"
	fi
	if [[ "$SUBSONIC_HTTPS_PORT" == "" ]]; then
		SUBSONIC_HTTPS_PORT="0"
	fi
	if [[ "$SUBSONIC_CONTEXT_PATH" == "" ]]; then
		SUBSONIC_CONTEXT_PATH="/"
	fi
	if [[ "$SUBSONIC_MAX_MEMORY" == "" ]]; then
		SUBSONIC_MAX_MEMORY="100"
	fi

	# remove the ending slash if it's there
	if [[ ${SUBSONIC_HOME:$((${#SUBSONIC_HOME} - 1))} = "/" ]]; then
		SUBSONIC_HOME=${SUBSONIC_HOME:0:$((${#SUBSONIC_HOME} - 1))}
	fi

	
	echo -n "Saving configuration..."
	echo "# subsonic configuration" > /boot/config/plugins/subsonic/subsonic.cfg
	echo "SERVICE=\"$SERVICE\"" >> /boot/config/plugins/subsonic/subsonic.cfg
	echo "SUBSONIC_HOME=\"$SUBSONIC_HOME\"" >> /boot/config/plugins/subsonic/subsonic.cfg
	echo "SUBSONIC_HOST=\"$SUBSONIC_HOST\"" >> /boot/config/plugins/subsonic/subsonic.cfg
	echo "SUBSONIC_PORT=\"$SUBSONIC_PORT\"" >> /boot/config/plugins/subsonic/subsonic.cfg
	echo "SUBSONIC_HTTPS_PORT=\"$SUBSONIC_HTTPS_PORT\"" >> /boot/config/plugins/subsonic/subsonic.cfg
	echo "SUBSONIC_CONTEXT_PATH=\"$SUBSONIC_CONTEXT_PATH\"" >> /boot/config/plugins/subsonic/subsonic.cfg
	echo "SUBSONIC_MAX_MEMORY=\"$SUBSONIC_MAX_MEMORY\"" >> /boot/config/plugins/subsonic/subsonic.cfg
	echo "USE_BETA=\"$USE_BETA\"" >> /boot/config/plugins/subsonic/subsonic.cfg
	echo "RUNAS=\"$RUNAS\"" >> /boot/config/plugins/subsonic/subsonic.cfg
	echo
}

source /boot/config/plugins/subsonic/subsonic.cfg

case "$1" in
	'start')
		subsonic_start
	;;
	'stop')
		subsonic_stop
	;;
	'install')
		subsonic_install
	;;
	'disable')
		subsonic_disable $2 $3 $4 $5 $6 $7 $8 $9
	;;
	'enable')
		subsonic_enable $2 $3 $4 $5 $6 $7 $8 $9
	;;
	*)
		echo "Usage: /etc/rc.d/rc.subsonic {start|stop|install}"
esac
]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/subsonic/subsonic.php">
<INLINE>
<![CDATA[
<?PHP
	$subsonic_cfg = parse_ini_file("/boot/config/plugins/subsonic/subsonic.cfg");
	$pid_file = "/var/run/subsonic/subsonic.pid";
	$subsonic_running = file_exists($pid_file) ? "yes" : "no";
	$jre_test = trim( shell_exec( "/usr/lib/java/bin/java -version 2>&1 | grep 'java' | awk '{print \$3}' | sed -e 's|\"||g'") );
?>
<style>
	.notes {
		font-size:85%;
		color:#666;
	}
	.rednotes {
		font-size:88%;
		color:#FF0000;
	}
	.status_head {
		font-size: 14px;
		font-weight: bold;
	}
</style>
<form id="subsonic_settings" name="subsonic_settings" method="POST" action="/update.htm" target="progressFrame">
	<input type="hidden" name="cmd" value="/etc/rc.d/rc.subsonic" />
	<table class="settings">
		<tr>
			<td>Enable Subsonic:</td>
			<td>
				<select name="arg1" size="1" onChange="checkRunning(this.form);">
					<?=mk_option($subsonic_cfg['SERVICE'], "disable", "No");?>
					<?=mk_option($subsonic_cfg['SERVICE'], "enable", "Yes");?>
				</select>
			</td>
		</tr>
		<tr>
			<td>Subsonic Installation Directory:</td>
			<td>
				<input type="text" name="arg2" maxlength="60" value="<?=$subsonic_cfg['SUBSONIC_HOME'];?>">
				<br />
				<span class="notes">Cache drive is suggested; Directory will be created, if it doesn't exist.</span>
			</td>
		</tr>
		<tr>
			<td>IP Address of unRAID Server:</td>
			<td>
				<input type="text" name="arg3" maxlength="60" value="<?=$subsonic_cfg['SUBSONIC_HOST'];?>">
				<br />
				<span class="notes">default: 0.0.0.0 (binds to all network interfaces; will be used if left blank)</span>
			</td>
		</tr>
		<tr>
			<td>HTTP Port for Subsonic Web Server:</td>
			<td>
				<input type="text" name="arg4" maxlength="60" value="<?=$subsonic_cfg['SUBSONIC_PORT'];?>">
				<br />
				<span class="notes">default: 4040</span>
			</td>
		</tr>
		<tr>
			<td>HTTPS Port for Subsonic Web Server:</td>
			<td>
				<input type="text" name="arg9" maxlength="60" value="<?=$subsonic_cfg['SUBSONIC_HTTPS_PORT'];?>">
				<br />
				<span class="notes">default: 0</span>
			</td>
		</tr>
		<tr>
			<td>Context Path of Subsonic URL:</td>
			<td>
				<input type="text" name="arg5" maxlength="60" value="<?=$subsonic_cfg['SUBSONIC_CONTEXT_PATH'];?>">
				<br />
				<span class="notes">default: / (the last part of the Subsonic URL)</span>
			</td>
		</tr>
		<tr>
			<td>Subsonic Memory Limit:</td>
			<td>
				<input type="text" name="arg6" maxlength="60" value="<?=$subsonic_cfg['SUBSONIC_MAX_MEMORY'];?>"> MB
				<br />
				<span class="notes">default: 100 (max Java heap size)</span>
			</td>
		</tr>
		<tr>
			<td>Use Subsonic Beta:</td>
			<td>
				<select name="usebeta" size="1" onChange="checkUSEBETA(this.form);">
					<?=mk_option($subsonic_cfg['USE_BETA'], "0", "No");?>
					<?=mk_option($subsonic_cfg['USE_BETA'], "1", "Yes");?>
				</select>
				<br />
				<span class="notes">default: no (Beta Version Not Available)</span>
				<input type="text" name="arg7" value="<?=$subsonic_cfg['USE_BETA'];?>"/>
			</td>
		</tr>
		<tr>
			<td>Run as user:</td>
			<td>
				<select name="runas" size="1" onChange="checkRUNAS(this.form);">
					<?=mk_option($subsonic_cfg['RUNAS'], "nobody", "nobody");?>
					<?=mk_option($subsonic_cfg['RUNAS'], "root", "root");?>
				</select>
				<br />
				<span class="notes">default: nobody </span>
				<input type="text" name="arg8" value="<?=$subsonic_cfg['RUNAS'];?>" />
			</td>
		</tr>
		<tr>
			<td></td>
			<td><input type="submit" name="runCmd" value="Apply"><button type="button" onClick="done();">Done</button></td>
		</tr>
	</table>
</form>
<hr />
<table style="width:100%;">
	<tr>
		<td style="text-align:center;">
			<p>
				<span class="status_head">Status: </span>
					<?PHP 
						if ($subsonic_running=="yes"){ 
							echo "<span class=\"green\">Subsonic is running.</span></p><p><span><a href=\"//" . $var['NAME'] . ":" . $subsonic_cfg["SUBSONIC_PORT"] . $subsonic_cfg["SUBSONIC_CONTEXT_PATH"] . "\" target=\"_blank\">Open Subsonic in a new window</a>"; 
							echo "<br/><span class=\"rednotes\">Subsonic may not start right away. <br /> Please give it a minute or two if the page doens't open.</span></span>";
						} 
						else { echo "<span class=\"red\">Subsonic is NOT running.</span>"; } 
					?>
			</p>
			<p>
				<strong>Note:</strong> 
				Java version <?= $jre_test; ?> is currently running.
			</p>
		</td>
	</tr>
</table>
<script type="text/javascript">
	function checkRunning(form)
	{
		if ("<?=$subsonic_running;?>" == "yes")
		{
			form.arg2.readOnly = true;
			form.arg3.readOnly = true;
			form.arg4.readOnly = true;
			form.arg5.readOnly = true;
			form.arg6.readOnly = true;
			form.arg9.readOnly = true;
			form.usebeta.disabled = true;
			form.runas.disabled = true;
		}
	   else
	   {
			form.arg2.readOnly = (form.arg1.value == "enable");
			form.arg3.readOnly = (form.arg1.value == "enable");
			form.arg4.readOnly = (form.arg1.value == "enable");
			form.arg5.readOnly = (form.arg1.value == "enable");
			form.arg6.readOnly = (form.arg1.value == "enable");
			form.arg9.readOnly = (form.arg1.value == "enable");
			form.usebeta.disabled = (form.arg1.value == "enable");
			form.runas.disabled = (form.arg1.value == "enable");
	   }
	}

	function checkUSEBETA(form)
	{
		form.arg7.value = form.usebeta.options[form.usebeta.selectedIndex].value;
		form.arg7.type = "hidden";
	}

	function checkRUNAS(form)
	{
		form.arg8.value = form.runas.options[form.runas.selectedIndex].value;
		form.arg8.type = "hidden";
	}

	checkRunning(document.subsonic_settings);
	checkUSEBETA(document.subsonic_settings);
	checkRUNAS(document.subsonic_settings);
</script>
]]>
</INLINE>
</FILE>

<!-- event handler to start subsonic when mounting disks -->
<FILE Name="/usr/local/emhttp/plugins/subsonic/event/disks_mounted" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/bash
/etc/rc.d/rc.subsonic start
]]>
</INLINE>
</FILE>

<!-- event handler to stop subsonic when unmounting disks -->
<FILE Name="/usr/local/emhttp/plugins/subsonic/event/unmounting_disks" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/bash
/etc/rc.d/rc.subsonic stop
]]>
</INLINE>
</FILE>

<FILE Name="/tmp/subsonic-install" Run="/bin/bash">
<INLINE>
<![CDATA[
# install ffmpeg packages
tar -zxf /boot/packages/ffmpeg-1sl-pkgs.tgz -C /boot/packages/
upgradepkg --install-new /boot/packages/ffmpeg-1sl-pkgs/*.* 

# include our config vars
source /boot/config/plugins/subsonic/subsonic.cfg

# create subsonic-writable directory for pid file
if [ ! -e /var/run/subsonic ]; then
	mkdir /var/run/subsonic
	chown $RUNAS:users /var/run/subsonic
	chmod 0777 /var/run/subsonic
fi

rm /tmp/subsonic-install
]]>
</INLINE>
</FILE>

<!-- create log file -->
<FILE Name="/var/log/plugins/subsonic">
<INLINE>
<![CDATA[
]]>
</INLINE>
</FILE>

</PLUGIN>
